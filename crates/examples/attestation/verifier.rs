use std::{str, time::Duration};

use elliptic_curve::PublicKey;
use k256::Secp256k1;
use tlsn_core::{presentation::Presentation, CryptoProvider};

/// A simple verifier which reads an attestation generated by
/// `attestation_prover.rs` from "simple_attestation.json", verifies
/// it and prints the verified data to the console.

fn main() {
    // Deserialize the proof
    let json = std::fs::read_to_string("simple_attestation.json").unwrap();
    let presentation: Presentation = serde_json::from_str(json.as_str()).unwrap();

    let provider = CryptoProvider::default();

    // Verify the attestation
    let presentation_output = presentation.verify(&provider).unwrap();

    // Public key of notary that signed the attestation
    let verifying_key: PublicKey<Secp256k1> =
        PublicKey::from_sec1_bytes(&presentation_output.attestation.body.verifying_key().data)
            .unwrap();

    // The time at which the session was recorded
    let connection_info = presentation_output.connection_info;
    let time = chrono::DateTime::UNIX_EPOCH + Duration::from_secs(connection_info.time);

    let mut partial_transcript = presentation_output.transcript.unwrap();
    partial_transcript.set_unauthed(b'X');

    let sent = str::from_utf8(partial_transcript.sent_unsafe()).unwrap();
    let recv = str::from_utf8(partial_transcript.received_unsafe()).unwrap();

    println!("-------------------------------------------------------------------");
    println!(
        "Successfully verified that the bytes below came from a session with {:?} at {}.",
        presentation_output.server_name.unwrap(),
        time
    );
    println!("Attestation was signed by:");
    println!("{}", verifying_key.to_string());
    println!("Note that the bytes which the Prover chose not to disclose are shown as X.");
    println!();
    println!("Bytes sent:");
    println!();
    print!("{}", sent);
    println!();
    println!("Bytes received:");
    println!();
    println!("{}", recv);
    println!("-------------------------------------------------------------------");
}
