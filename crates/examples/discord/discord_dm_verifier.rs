use std::{str, time::Duration};

use tlsn_core::{presentation::Presentation, CryptoProvider};

use k256::{pkcs8::DecodePublicKey, PublicKey};

/// A simple verifier which reads a proof generated by `discord_dm.rs` from
/// "discord_dm_proof.json", verifies it and prints the verified data to the
/// console.
fn main() {
    // Deserialize the proof
    let presentation_string = std::fs::read_to_string("discord_dm_presentation.json").unwrap();
    let presentation: Presentation = serde_json::from_str(presentation_string.as_str()).unwrap();

    let provider = CryptoProvider::default();

    let presentation_output = presentation.verify(&provider).unwrap();
    let connection_info = presentation_output.connection_info;

    // Verify that the signature is from the notary
    let verifying_key = presentation_output
        .attestation
        .body
        .verifying_key()
        .data
        .clone();

    if verifying_key != *notary_pubkey().to_sec1_bytes() {
        panic!("Unexpected notary public key in attestation")
    }

    // The time at which the session was recorded
    let time: chrono::DateTime<chrono::Utc> =
        chrono::DateTime::UNIX_EPOCH + Duration::from_secs(connection_info.time);

    let mut partial_transcript = presentation_output.transcript.unwrap();
    partial_transcript.set_unauthed(b'X');

    let sent = str::from_utf8(partial_transcript.sent_unsafe()).unwrap();
    let recv = str::from_utf8(partial_transcript.received_unsafe()).unwrap();

    println!("-------------------------------------------------------------------");
    println!(
        "Successfully verified that the bytes below came from a session with {:?} at {}.",
        presentation_output.server_name.unwrap(),
        time
    );
    println!("Note that the bytes which the Prover chose not to disclose are shown as X.");
    println!();
    println!("Bytes sent:");
    println!();
    print!("{}", sent);
    println!();
    println!("Bytes received:");
    println!();
    println!("{}", recv);
    println!("-------------------------------------------------------------------");
}

/// Returns a Notary pubkey trusted by this Verifier
fn notary_pubkey() -> PublicKey {
    let notary_public_key_pem = include_str!("../../notary/server/fixture/notary/notary.pub");
    PublicKey::from_public_key_pem(notary_public_key_pem).unwrap()
}
