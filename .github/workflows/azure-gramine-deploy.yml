name: azure-tee-release

on:
  release:
    types: [published]
    branches:
      - 'releases/**'
jobs:
  update-reverse-proxy:
    environment: tee
    runs-on: ubuntu-latest
    outputs:
      teeport: ${{ steps.portbump.outputs.newport}}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: "dev"
      - name: apt
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: update caddyfile
        id: portbump
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          DOMAIN=notary.covert.codes
          CADDYFILE_PATH='cd-scripts/tee/azure/Caddyfile'
          PORT_FILE='cd-scripts/tee/azure/tags.txt'
          START_PORT=6061
          # create ports.txt if it doesn't exist
          if [ ! -f "$PORT_FILE" ]; then
            echo "health $START_PORT" > $PORT_FILE
          fi
          # check if the release tag already has a port assigned
          ASSIGNED_PORT=$(grep "${RELEASE_TAG}" $PORT_FILE | awk '{print $2}')
          if [ -z "$ASSIGNED_PORT" ]; then
            # find the next available port if this release tag doesn't have one
            NEXT_PORT=$(($(tail -n 1 $PORT_FILE | awk '{print $2}') + 1))
            echo "${RELEASE_TAG} ${NEXT_PORT}" >> $PORT_FILE
          else
            NEXT_PORT=$ASSIGNED_PORT
          fi
          echo "newport=$NEXT_PORT" >> $GITHUB_OUTPUT
          # check if the tee.notary.dev block already exists in the Caddyfile
          if ! grep -q "$DOMAIN {" $CADDYFILE_PATH; then
            # Add the main block to the Caddyfile if it doesn't exist
            echo -e "$DOMAIN {\n}" >> $CADDYFILE_PATH
          fi
          # insert the reverse proxy entry for the new release tag
          sed -i "/$DOMAIN {/a \ \ \ \ reverse_proxy /${RELEASE_TAG}* localhost:${NEXT_PORT}" $CADDYFILE_PATH
      - name: Commit and push updated Caddyfile
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "azure tee release: ${RELEASE_TAG}"
          git push
      - name: Deploy updated Caddyfile to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AZURE_TEE_BUILD_HOST }}
          username: ${{ secrets.AZURE_BUILD_TEE_USERNAME }}
          key: ${{ secrets.AZURE_TEE_BUILD_KEY }}
          source: "cd-scripts/tee/azure/Caddyfile"
          target: "~/"

      - name: Reload Caddy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AZURE_TEE_BUILD_HOST }}
          username: ${{ secrets.AZURE_BUILD_TEE_USERNAME }}
          key: ${{ secrets.AZURE_TEE_BUILD_KEY }}
          script: |
            sudo cp ~/cd-scripts/tee/azure/Caddyfile /etc/caddy/Caddyfile
            sudo systemctl reload caddy
  build-measure-deploy:
      environment: tee
      runs-on: [self-hosted, linux]
      needs: [ update-reverse-proxy ]
      container:
        image: notaryserverbuilds.azurecr.io/builder/gramine
        credentials:
          username: notaryserverbuilds
          password: ${{ secrets.AZURE_CR_BUILDS_PW }}
        env:
          GIT_COMMIT_HASH: $EVENTTAG
          GIT_COMMIT_TIMESTAMP: ${{ github.event.repository.updated_at}}
        options: "--device /dev/sgx_enclave"
      steps:
        - name: get code
          uses: actions/checkout@v4
        - name: get emulated measurement
          run: |
             cd crates/notary/server/fixture/gramine
             make
             gramine-sgx-sigstruct-view --verbose --output-format=toml notary-server.sig
        - name: get real measurement
          run: |
             cd crates/notary/server/fixture/gramine
             SGX=1 make
             gramine-sgx-sigstruct-view --verbose --output-format=toml notary-server.sig
        - name: get measurement from notary
          run: |
             cd crates/notary/server/fixture/gramine
             SGX=1 make
             SGX=1 make start-gramine-server &
             curl 127.0.0.1:7047/info
        - name: Build and push
          uses: docker/build-push-action@v6
          with:
            push: true
            tags: notaryserverbuilds.azurecr.io/prod/gramine:$GIT_COMMIT_HASH
        - name: run
          run: |
           docker run --device /dev/sgx_enclave --device /dev/sgx_provision -p  ${{needs.update-reverse-proxy.outputs.teeport}}:7047 notaryserverbuilds.azurecr.io/prod/gramine:$GIT_COMMIT_HASH
      
