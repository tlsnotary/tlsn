rd_("CgThe iv used for encryption of the sent and received \xe2\x80\xa6BfReturns the hash algorithm identifier.0iDNS name.0ChThe key used for encryption of the sent and received \xe2\x80\xa6AjThe algorithm of the hash.0AhThe hash algorithm used.110ClReturns the hash algorithm with the given identifier, or \xe2\x80\xa6CfReturns the subsequence of the transcript with the \xe2\x80\xa610AcIndex of plaintext.000A`Public key data.0CeReturns the length of the sent and received data, \xe2\x80\xa6BfReturns the length of the subsequence.10BhCreates a new hash algorithm identifier.B`Creates a new blinded pre-image.AeCreates a new prover.AfCreates a new builder.AgCreates a new verifier.BjCreates a new server certificate verifier.2BdCreates a new commit config builder.AlCreates a new proof builder.AmCreates a new TLS transcript.AiCreates a new transcript.CfCreates a new partial transcript initalized to all 0s.AjCreates a new subsequence.AeCreates a new secret.AlCreates a new encoding tree.::=<AjCreates a new Merkle tree.876543219CeRuns the verifier until the TLS connection is closed.A`Sequence number.0oSignature data.CfServer certificate signature over the binding message.10dTag.0AgType of the public key.mContent type.10mA hash value.CaA hash commitment to plaintext in the transcript.AjPlaintext hash commitment.AfPlaintext hash secret.3210BeSent from the Prover to the TLS peer.0hTLS 1.2.AlTLS 1.2 certificate binding.10hTLS 1.3.0AdInvalid certificate.0AaReturns the data.BdReturns the data of the subsequence.10AoReturns the argument unchanged.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000kHash types.BgComputes the hash of the provided data.AkPlaintext hash commitments.AeThe hash of the data.3210BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CjReturns an iterator over the authenticated data in the \xe2\x80\xa60AmReturns the received records.0AmReturns the root of the tree.BhMerkle root of the encoding commitments.110AaReturns the seed.0CaNumber of bytes sent by the Prover to the Server.AiReturns the sent records.BeReturns a reference to the sent data.210BjUNIX time when the TLS connection started.BiReturns the start time of the connection.10AbTLSNotary library.BdState after MPC setup has completed.B`State after setup has completed.BdReturns the id as a <code>u8</code>.0BiBuilds a new <code>ProtocolConfig</code>.CbBuilds a new <code>ProtocolConfigValidator</code>.BgBuilds a new <code>ProverConfig</code>.AmBuilds the TLS configuration.AiBuilds the configuration.BiBuilds a new <code>VerifierConfig</code>.11AlBuilds the transcript proof.2220AiServer certificate chain.0BhCloses the connection with the verifier.BfCloses the connection with the prover.AbReturns the delta.0BhCreates an empty root certificate store.0BeReturns the index of the subsequence.jThe index.AkThe index which is missing.02100BhGenerates a proof for the given indices.C`Returns a Merkle proof for the provided indices.1BcProves information to the verifier.C`Unvalidated DER-encoded X.509 root certificates.0AcSets up the prover.AeSets up the verifier.AbSet up the prover.AbTLS prover states.AcTLS Verifier state.oThe hash value.0AfBLAKE3 hash algorithm.000AbA prover instance.mA TLS record.0AgSHA-256 hash algorithm.000BaReturns the DNS name as a string.0BhAdds a commitment with the default kind.0BoTLSNotary protocol config and config utilities.AmInserts leaves into the tree.AnReturns the transcript length.0AbMerkle tree types.gProver.AfReason for invalidity.0CdReturns the ranges of the transcript to be revealed.BkReveals the given ranges of the transcript.BkReveals the given ranges in the transcript.210ChReveals data to the verifier and finalizes the protocol.AaSignature scheme.0BdSeed used to generate the encodings.0BeVerifies information from the prover.CjRuns the TLS verifier to completion, verifying the TLS \xe2\x80\xa6AlVerifies the handshake data.0CkChecks if the counts of indices, hashes, and leaves are \xe2\x80\xa6CcVerifies the connection and finalizes the protocol.nWeb PKI types.AnA blinded pre-image of a hash.0oA hash blinder.0iDNS name.0AeA transcript encoder.0AeType of a public key.0CkReduces network bandwidth utilization at the expense of \xe2\x80\xa6BaPrefers a latency-heavy protocol.AdCertificate binding.0AeBlinder for the hash.0CfCreates a new builder for <code>ProtocolConfig</code>.CoCreates a new builder for <code>ProtocolConfigValidator</code>.CdCreates a new builder for <code>ProverConfig</code>.CaCreates a new builder for <code>TlsConfig</code>.AfCreates a new builder.BdCreates a new configuration builder.1BdCreates a new commit config builder.220CaConnects to the server using the provided socket.AfConnect to the prover.CdReturns a controller for the prover for advanced \xe2\x80\xa6CkCreates a new server certificate verifier with Mozilla root0AaNetwork settings.AmReturns the network settings.BcTLS version used in the connection.BaReturns the TLS protocol version.10BlA commitment to encodings of the transcript.AdEncoding commitment.nEncoding tree.210AbPEM parsing error.BiReceived by the prover from the TLS peer.0AdA Verifier instance.BgReturns a byte slice of the hash value.BdReturns the blinder as a byte slice.10CiReturns whether the index is in bounds of the transcript.CjReturns whether the tree contains the given transcript \xe2\x80\xa610BkTranscript encoding commitments and proofs.DaReturns <code>true</code> if an encoding commitment is requested.10AdFixtures for testingDhReturns <code>true</code> if the configuration has any hash commitments.ClReturns <code>true</code> if a hash commitment is requested.10BjReturns the length of the sent transcript.0CgNumber of bytes received by the Prover from the Server.BiReturns a reference to the received data.10CnPerforms compatibility check of the protocol configuration \xe2\x80\xa6iVerifier.CkReduces network round-trips at the expense of consuming \xe2\x80\xa6BcPrefers a bandwidth-heavy protocol.CiState after the TLS connection has been committed and \xe2\x80\xa6BoState after the TLS connection has been closed.CiThe direction of data communicated over a TLS connection.0AlA hash algorithm identifier.0AjKeccak-256 hash algorithm.000jsecp256r1.0C`Configuration for the prover\xe2\x80\x99s TLS connection.AcA typed hash value.0BgReturns the hash algorithm of the tree.CcReturns the hash algorithm used to create the tree.1AkDirection of the plaintext.000CeReturns an iterator over the hash commitment indices.BnReturns an iterator over the hash commitments.10jPlaintext.0AgTLSNotary core library.AhTLSNotary WASM bindings.BoReturns a connection fixture for tlsnotary.org.lMerkle tree.A`Server\xe2\x80\x99s name.0lTLS version.0CjA transcript contains the plaintext of all application \xe2\x80\xa60CeVerify data from the TLS handshake finished messages.0C`Returns a connection fixture for appliedzkp.org.kCiphertext.0AeTLS connection types.0AgInitializes the module.BkReturns the inner parts of the subsequence.0CmSets the root certificates to use for verifying the server\xe2\x80\xa6BcReturns the root certificate store.AnReturns the TLS configuration.AbTLS configuration.ChReturns a partial transcript containing the provided \xe2\x80\xa60CaReturns a request for the transcript commitments.0AaTranscript types.AgReturns the transcript.A`Transcript data.20B`Transcript fixtures for testing.2AhTLS certificate binding.0BoThe <code>ContentType</code> TLS protocol enum.0kEntry stateAbInitialized state.CgFailed to verify certificate path to provided trust \xe2\x80\xa6AbMerkle tree error.mMerkle proof.AoIndex is missing from the tree.0BiIndex is out of bounds of the transcript.0CcConfiguration to prove information to the verifier.0AnError for <code>Prover</code>.AiThe record size in bytes.BbInformation about the TLS session.AgTranscript subsequence.0CnReturns a certificate chain and a matching private key for \xe2\x80\xa6CgSets a DER-encoded certificate chain and a matching \xe2\x80\xa6CkAdds a commitment with the default kind to the received \xe2\x80\xa60ClAdds a commitment with the default kind to the sent data \xe2\x80\xa60CcWrites the encoding for the given data into the \xe2\x80\xa60BkReturns whether the transcript is complete.0AfCreates a new encoder.0CiReveals the given ranges of the received data transcript.CdReveals the given ranges in the received transcript.10CeReveals the given ranges of the sent data transcript.C`Reveals the given ranges in the sent transcript.10CbReturns the index of sent data which have been \xe2\x80\xa60BeReturns a reference to the sent data.0AlReturns the server DNS name.AdThe server DNS name.A`Server\xe2\x80\x99s name.A`Server identity.0BfA merkle tree of transcript encodings.0nHash provider.0AmConfiguration for the prover.CmProver future which must be polled for the TLS connection \xe2\x80\xa6nProver output.0CdConfiguration to verify information from the prover.0BkSets the default kind of commitment to use.0CgWrites the zero encoding for the given range of the \xe2\x80\xa60DcReturns <code>true</code> if the configuration has any encoding \xe2\x80\xa60BnReturns the length of the received transcript.0BdSend the HTTP request to the server.CiSets all bytes in the transcript which haven\xe2\x80\x99t been \xe2\x80\xa60C`Secret used by an encoder to generate encodings.0AmAn encoding commitment proof.0AcTLS handshake data.0AdA hashing algorithm.0BdHash of plaintext in the transcript.0AiPrivate key, DER encoded.0AlA controller for the prover.AgRoot certificate store.0ChA transcript of TLS records sent and received by the \xe2\x80\xa60B`Error for <code>Verifier</code>.AcTLS Verifier state.nClient random.0CeComputes the hash of the provided data with a prefix.0CiReturns an iterator over the encoding commitment indices.0BmMaximum number of bytes that can be received.CiReturns the maximum number of bytes that can be received.01BiMaximum number of bytes that can be sent.CeReturns the maximum number of bytes that can be sent.01CgReturns the index of sent data which haven\xe2\x80\x99t been \xe2\x80\xa60nServer random.0AfSets a hash algorithm.0BhReturns the application data transcript.0AoX.509 certificate, DER encoded.0AhTLS session information.0BeSettings for the network environment.CkProtocol configuration to be set up initially by prover \xe2\x80\xa6B`Server\xe2\x80\x99s ephemeral public key.0BlConfiguration for the <code>Verifier</code>.A`Verifier output.0BbReturns an encoder secret fixture.oExplicit nonce.0ChCreates a DER-encoded certificate from a PEM-encoded \xe2\x80\xa6ChCreates a DER-encoded private key from a PEM-encoded \xe2\x80\xa610B`Hashes plaintext with a blinder.0AkReturns the TLS transcript.0AlTLS 1.2 certificate binding.0CfEncoding provider is missing an encoding for an index.0CdServer\xe2\x80\x99s signature of the key exchange parameters.0C`Signature scheme on the key exchange parameters.0BfProof of the contents of a transcript.0AgCustom validation error00AlClient finished verify data.0AgConnection information.BcReturns the protocol configuration.CgProtocol configuration to be checked with the verifier.CfReturns the index of received data which have been \xe2\x80\xa60BiReturns a reference to the received data.0AlServer finished verify data.0DaReturns <code>true</code> if the server identity is to be proven.AkProves the server identity.10BbA provider of plaintext encodings.0BcBuilder for <code>TlsConfig</code>.AnTranscript length information.0BcSecret for a transcript commitment.0AbAdds a commitment.0ChSets the commitment kinds in order of preference for \xe2\x80\xa60CnDefers decryption of data from the server until the server \xe2\x80\xa6CjMaximum number of application data records that can be \xe2\x80\xa6CjReturns the maximum number of application data records \xe2\x80\xa601CcWrites the encoding of the given range into the \xe2\x80\xa60AmReturns the server signature.0CiUnions the authenticated data of this transcript with \xe2\x80\xa60CaA fixture containing various TLS connection data.AlEncoding tree builder error.0BgAn error for <code>HashProvider</code>.0CmFailed to verify certificate is valid for provided server \xe2\x80\xa6AeA partial transcript.0CkReturns the hash algorithm to use for encoding commitments.ChSets the hash algorithm to use for encoding commitments.10BeReturns an encoding provider fixture.CkReturns the index of received data which haven\xe2\x80\x99t been \xe2\x80\xa60BeReturns the server certificate chain.0C`Returns the transcript commitment configuration.BbConfigures transcript commitments.10AbTranscript length.AfThe transcript length.10CiUnions an authenticated subsequence into this transcript.0AoTranscript encoding commitment.0BeError for <code>EncodingProof</code>.0AjInvalid subsequence error.0BeBuilder for <code>ProveConfig</code>.0AlServer certificate verifier.0AcUninitialized field00CiSets all bytes in the transcript which haven\xe2\x80\x99t been \xe2\x80\xa60BhCreates a transript fixture for testing.AnTranscript commitment secrets.0CjVerifies the server certificate was valid at the given \xe2\x80\xa60BjError returned when a DNS name is invalid.0BoSecret component of <code>PlaintextHash</code>.0AgA ProtocolConfig error.BfBuilder for <code>ProverConfig</code>.BfBuilder for <code>VerifyConfig</code>.0BeReturns the certificate binding data.0AfTranscript commitment.0BgError for <code>TranscriptProof</code>.0CnMaximum number of bytes that can be decrypted online, i.e. \xe2\x80\xa6CmReturns the maximum number of bytes that can be decrypted \xe2\x80\xa6B`Server\xe2\x80\x99s ephemeral public key.CkReturns the server ephemeral key used in the TLS handshake.BiReturns the server_ephemeral_key fixture.21AcVerifies the proof.BjVerifies the proof against the commitment.10BhError for <code>EncodingProvider</code>.0BhBuilder for <code>ProtocolConfig</code>.BhBuilder for <code>VerifierConfig</code>.CdRoot certificate store contains invalid certificate.BiConfiguration for transcript commitments.0BiBuilder for <code>TranscriptProof</code>.0AgTranscript commitments.000AlA encoding provider fixture.CjProtocol configuration validator used by checker (i.e. \xe2\x80\xa6BjError for <code>ProveConfigBuilder</code>.0BjError for <code>ServerCertVerifier</code>.BjRequest to compute transcript commitments.0ClMaximum number of received application data records that \xe2\x80\xa6CkReturns the maximum number of received application data \xe2\x80\xa6CjReturns the maximum number of application data records \xe2\x80\xa6CjMaximum number of application data records that can be \xe2\x80\xa6AnKind of transcript commitment.0BkError for <code>VerifyConfigBuilder</code>.0BmReturns the protocol configuration validator.ClErrors that can occur when verifying a certificate chain \xe2\x80\xa60BdError type for ProtocolConfigBuilderBdError type for VerifierConfigBuilderCd<code>PartialTranscript</code> in a compressed form.0BbEnd-entity certificate is invalid.BnError for <code>TranscriptProofBuilder</code>.0DkWhether the <code>deferred decryption</code> feature is toggled on from \xe2\x80\xa6DkReturns whether the <code>deferred decryption</code> feature is toggled \xe2\x80\xa6BjReturns a tampered encoder secret fixture.CbA builder for <code>TranscriptCommitConfig</code>.0CaBuilder for <code>ProtocolConfigValidator</code>.CeError for <code>TranscriptCommitConfigBuilder</code>.0BmError type for ProtocolConfigValidatorBuilder")