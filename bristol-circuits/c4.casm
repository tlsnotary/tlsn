# TLS stage 4.
# Compute ghash H, gctr block, encrypted counter block - needed for Client Finished 

12 2146
2 416 544

# notary inputs
#  128: cwk
#  32:  civ
#  128: output mask5 (for H)
#  128: output mask6 (for gctr block)

# user inputs
#  128: cwk
#  32:  civ
#  128: output mask5 (for H)
#  128: output mask6 (for gctr block)
#  128: output mask7 (for encrypted counter) 

1 384

# all outputs go to the evaluator
# 128: H xor-masked twice (by mask5)
# 128: gctr block for client_finished xor-masked twice (by each mask6)
# 128: encrypted counter block for cf xor-masked by user's mask7

2 1 0 0 1120 XOR  # 0
1 1 1120 1121 INV # 1

# combine key shares
256 128 [0|>128] [416|>128] [960|>128] xor128bits.casm    # cwk
64 32 [128|>32] [544|>32] [1088|>32] xor32bits.casm        # civ


# get encrypted zero - AES-GCM's H
#    client_write_key zeroes
#      \          /  /      \ 
256 128 [960|>128] [1120*128] [1122|>128] aes_128_reverse.txt

# gctr block for client_finished
# to be encrypted: 4-byte client_write_IV + 8-byte nonce == 1 + 4-byte block counter value == 1
#    client_write_key 1  31 zeros   1   63 zeros client_write_IV
#      \           /                              \         /
256 128 [960|>128] 1121 [1120*31] 1121 [1120*63] [1088|>32] [1250|>128] aes_128_reverse.txt

# encrypted counter block
# to be encrypted: 4-byte client_write_IV + 8-byte nonce == 1 + 4-byte block counter value == 2
# note that input is "lsb first"
#    client_write_key 0   1   30 zeros   1   63 zeros client_write_IV
#      \           /                                  \         /
256 128 [960|>128] 1120 1121 [1120*30] 1121 [1120*63] [1088|>32] [1378|>128] aes_128_reverse.txt


#prepare all outputs

# xor H/gctr with notary's masks
256 128 [1122|>128] [160|>128] [1506|>128] xor128bits.casm
256 128 [1250|>128] [288|>128] [1634|>128] xor128bits.casm
# and then with user's masks
256 128 [1506|>128] [576|>128]  [1762|>128] xor128bits.casm
256 128 [1634|>128] [704|>128] [1890|>128] xor128bits.casm

# mask encrypted counter block only with the user's mask
256 128 [1378|>128] [832|>128] [2018|>128] xor128bits.casm