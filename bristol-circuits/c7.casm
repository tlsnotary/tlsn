# AES-ECB encrypt one block to produce gctr block
# exactly the same as circuit 6 except here the counter is fixed at 1

7 1138
2 288 304

# notary inputs
#  128: client_write_key share
#  32 : client_write_IV share
#  128: output mask
# user inputs
#  128: client_write_key share
#  32 : client_write_IV share
#  128: output mask
#  16 : nonce

1 128
# all outputs go to the evaluator:
# 128: gctr block masked twice

2 1 0 0 592 XOR # 0 
1 1 592 593 INV # 1

# combine client_write_key shares
256 128 [0|>128] [288|>128] [594|>128] xor128bits.casm

# combine client_write_IV shares
64 32 [128|>32] [416|>32] [722|>32] xor32bits.casm

# encrypt client_write_IV + nonce (8 bytes) + counter (4 bytes) == 1 
# (counter is fixed at 1 for gctr blocks)
256 128 [594|>128] 593 [592*31] [576|>16] [592*48] [722|>32] [754|>128] aes_128_reverse.txt

# mask by notary
256 128 [754|>128] [160|>128] [882|>128] xor128bits.casm

# mask by user
256 128 [882|>128] [448|>128] [1010|>128] xor128bits.casm