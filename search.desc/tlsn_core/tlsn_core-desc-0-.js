searchState.loadedDescShard("tlsn_core", 0, "TLSNotary core library.\nConfiguration to prove information to the verifier.\nBuilder for <code>ProveConfig</code>.\nError for <code>ProveConfigBuilder</code>.\nProver output.\nVerifier output.\nConfiguration to verify information from the prover.\nBuilder for <code>VerifyConfig</code>.\nError for <code>VerifyConfigBuilder</code>.\nBuilds the configuration.\nBuilds the configuration.\nCreates a new builder.\nCreates a new builder.\nTLS connection types.\nFixtures for testing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle tree types.\nCreates a new builder.\nCreates a new builder.\nReveals the given ranges of the transcript.\nReveals the given ranges of the received data transcript.\nReveals the given ranges of the sent data transcript.\nReturns <code>true</code> if the server identity is to be proven.\nProves the server identity.\nServer identity.\nTranscript types.\nReturns the transcript to be proven.\nTranscript data.\nReturns the transcript commitment configuration.\nConfigures transcript commitments.\nTranscript commitments.\nTranscript commitments.\nTranscript commitment secrets.\nWeb PKI types.\nTLS certificate binding.\nTLS 1.2 certificate binding.\nTLS session information.\nDNS name.\nDNS name.\nTLS handshake data.\nErrors that can occur when verifying a certificate chain …\nError returned when a DNS name is invalid.\nType of a public key.\nsecp256r1.\nServer’s ephemeral public key.\nServer’s name.\nServer’s signature of the key exchange parameters.\nSignature scheme on the key exchange parameters.\nTLS version.\nTranscript length information.\nTLS 1.2.\nTLS 1.2 certificate binding.\nTLS 1.3.\nVerify data from the TLS handshake finished messages.\nReturns the DNS name as a string.\nCertificate binding.\nServer certificate chain.\nClient finished verify data.\nClient random.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key data.\nNumber of bytes received by the Prover from the Server.\nSignature scheme.\nNumber of bytes sent by the Prover to the Server.\nServer’s ephemeral public key.\nServer finished verify data.\nServer random.\nSignature data.\nServer certificate signature over the binding message.\nUNIX time when the TLS connection started.\nTranscript length.\nType of the public key.\nVerifies the handshake data.\nTLS version used in the connection.\nA fixture containing various TLS connection data.\nA encoding provider fixture.\nReturns a connection fixture for appliedzkp.org.\nReturns an encoder secret fixture.\nReturns a tampered encoder secret fixture.\nReturns an encoding provider fixture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the server_ephemeral_key fixture.\nReturns a connection fixture for tlsnotary.org.\nBLAKE3 hash algorithm.\nBLAKE3 hash algorithm.\nA blinded pre-image of a hash.\nA hash blinder.\nA hash value.\nA hash algorithm identifier.\nA hashing algorithm.\nHash provider.\nAn error for <code>HashProvider</code>.\nKeccak-256 hash algorithm.\nKeccak-256 hash algorithm.\nSHA-256 hash algorithm.\nSHA-256 hash algorithm.\nA typed hash value.\nThe algorithm of the hash.\nReturns the blinder as a byte slice.\nReturns the id as a <code>u8</code>.\nReturns the data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the hash algorithm with the given identifier, or …\nComputes the hash of the provided data.\nComputes the hash of the provided data with a prefix.\nReturns the hash algorithm identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new hash algorithm identifier.\nCreates a new blinded pre-image.\nSets a hash algorithm.\nThe hash value.\nMerkle tree error.\nMerkle proof.\nMerkle tree.\nReturns the hash algorithm used to create the tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts leaves into the tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Merkle tree.\nReturns a Merkle proof for the provided indices.\nReturns the root of the tree.\nChecks if the counts of indices, hashes, and leaves are …\n<code>PartialTranscript</code> in a compressed form.\nThe direction of data communicated over a TLS connection.\nA commitment to encodings of the transcript.\nEncoding commitment.\nEncoding tree.\nA hash commitment to plaintext in the transcript.\nPlaintext hash commitment.\nPlaintext hash secret.\nTranscript index.\nBuilder for <code>Idx</code>.\nInvalid subsequence error.\nA partial transcript.\nReceived by the prover from the TLS peer.\nA TLS record.\nSent from the Prover to the TLS peer.\nTranscript subsequence.\nA transcript of TLS records sent and received by the …\nA transcript contains the plaintext of all application …\nConfiguration for transcript commitments.\nA builder for <code>TranscriptCommitConfig</code>.\nError for <code>TranscriptCommitConfigBuilder</code>.\nRequest to compute transcript commitments.\nTranscript commitment.\nKind of transcript commitment.\nProof of the contents of a transcript.\nBuilder for <code>TranscriptProof</code>.\nError for <code>TranscriptProofBuilder</code>.\nError for <code>TranscriptProof</code>.\nSecret for a transcript commitment.\nBuilds the configuration.\nBuilds the transcript proof.\nBuilds the index.\nCreates a new commit config builder.\nCreates a new index builder.\nReturns the certificate binding data.\nCiphertext.\nAdds a commitment with the default kind.\nAdds a commitment with the default kind to the received …\nAdds a commitment with the default kind to the sent data …\nAdds a commitment.\nSets the commitment kinds in order of preference for …\nReturns whether the index is in bounds of the transcript.\nReturns the number of disjoint ranges in the index.\nReturns the data of the subsequence.\nSets the default kind of commitment to use.\nCreates an empty index.\nTranscript encoding commitments and proofs.\nReturns <code>true</code> if an encoding commitment is requested.\nReturns the hash algorithm to use for encoding commitments.\nSets the hash algorithm to use for encoding commitments.\nReturns the end of the index, non-inclusive.\nExplicit nonce.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the subsequence of the transcript with the …\nReturns <code>true</code> if the configuration has any encoding …\nReturns <code>true</code> if the configuration has any hash commitments.\nReturns <code>true</code> if a hash commitment is requested.\nPlaintext hash commitments.\nReturns the index of the subsequence.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner parts of the subsequence.\nReturns whether the transcript is complete.\nReturns whether the index is empty.\nReturns an iterator over the authenticated data in the …\nReturns an iterator over the values in the index.\nReturns an iterator over the encoding commitment indices.\nReturns an iterator over the hash commitment indices.\nReturns an iterator over the hash commitments.\nReturns an iterator over the ranges of the index.\nReturns the length of the sent and received data, …\nReturns the number of values in the index.\nReturns the length of the subsequence.\nReturns the length of the received transcript.\nReturns the length of the sent transcript.\nReturns the transcript length.\nCreates a new commit config builder.\nCreates a new proof builder.\nCreates a new TLS transcript.\nCreates a new transcript.\nCreates a new partial transcript initalized to all 0s.\nCreates a new transcript index.\nCreates a new subsequence.\nPlaintext.\nReturns a reference to the received data.\nReturns the index of received data which have been …\nReturns the index of received data which haven’t been …\nReturns a reference to the received data.\nReturns the received records.\nReveals the given ranges in the transcript.\nReveals the given ranges in the received transcript.\nReveals the given ranges in the sent transcript.\nReturns the sent records.\nReturns a reference to the sent data.\nReturns the index of sent data which have been …\nReturns the index of sent data which haven’t been …\nReturns a reference to the sent data.\nSequence number.\nReturns the server certificate chain.\nReturns the server ephemeral key used in the TLS handshake.\nReturns the server signature.\nSets all bytes in the transcript which haven’t been …\nSets all bytes in the transcript which haven’t been …\nReturns the start of the index.\nTag.\nReturns the start time of the connection.\nReturns a partial transcript containing the provided …\nReturns a request for the transcript commitments.\nReturns the application data transcript.\nContent type.\nUnions ranges.\nUnions an authenticated subsequence into this transcript.\nUnions the authenticated data of this transcript with …\nVerifies the proof.\nReturns the TLS protocol version.\nThe hash algorithm used.\nA transcript encoder.\nSecret used by an encoder to generate encodings.\nTranscript encoding commitment.\nAn encoding commitment proof.\nError for <code>EncodingProof</code>.\nA provider of plaintext encodings.\nError for <code>EncodingProvider</code>.\nA merkle tree of transcript encodings.\nEncoding tree builder error.\nEncoding provider is missing an encoding for an index.\nIndex is missing from the tree.\nIndex is out of bounds of the transcript.\nReturns the hash algorithm of the tree.\nReturns whether the tree contains the given transcript …\nReturns the delta.\nWrites the encoding for the given data into the …\nWrites the zero encoding for the given range of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new secret.\nCreates a new encoding tree.\nCreates a new encoder.\nGenerates a proof for the given indices.\nWrites the encoding of the given range into the …\nReturns the root of the tree.\nMerkle root of the encoding commitments.\nSeed used to generate the encodings.\nReturns the seed.\nVerifies the proof against the commitment.\nThe index.\nThe index which is missing.\nThe index which is missing.\nThe transcript length.\nHash of plaintext in the transcript.\nSecret component of <code>PlaintextHash</code>.\nThe algorithm of the hash.\nBlinder for the hash.\nDirection of the plaintext.\nDirection of the plaintext.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the data.\nHashes plaintext with a blinder.\nIndex of plaintext.\nIndex of plaintext.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nX.509 certificate, DER encoded.\nEnd-entity certificate is invalid.\nFailed to verify certificate path to provided trust …\nRoot certificate store contains invalid certificate.\nFailed to verify certificate is valid for provided server …\nPEM parsing error.\nPrivate key, DER encoded.\nRoot certificate store.\nServer certificate verifier.\nError for <code>ServerCertVerifier</code>.\nCreates an empty root certificate store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a DER-encoded certificate from a PEM-encoded …\nCreates a DER-encoded private key from a PEM-encoded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new server certificate verifier with Mozilla root\nCreates a new server certificate verifier.\nUnvalidated DER-encoded X.509 root certificates.\nVerifies the server certificate was valid at the given …\nInvalid certificate.\nInvalid certificate.\nReason for invalidity.\nReason for invalidity.")