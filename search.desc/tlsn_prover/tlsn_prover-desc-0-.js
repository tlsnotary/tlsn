searchState.loadedDescShard("tlsn_prover", 0, "TLSNotary prover library.\nConfiguration to prove information to the verifier.\nBuilder for <code>ProveConfig</code>.\nError for <code>ProveConfigBuilder</code>.\nA prover instance.\nConfiguration for the prover\nBuilder for <code>ProverConfig</code>.\nError type for ProverConfigBuilder\nA controller for the prover.\nError for <code>Prover</code>.\nProver future which must be polled for the TLS connection …\nProver output.\nUninitialized field\nCustom validation error\nBuilds a new <code>ProverConfig</code>.\nBuilds the configuration.\nCreate a new builder for <code>ProverConfig</code>.\nCreates a new builder.\nCloses the connection with the verifier.\nConnects to the server using the provided socket.\nReturns the connection information.\nReturns a controller for the prover for advanced …\nReturns the crypto provider.\nCryptography provider.\nDefers decryption of data from the server until the server …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new prover.\nCreates a new builder.\nRequests an attestation from the verifier.\nReturns the protocol configuration.\nProtocol configuration to be checked with the verifier.\nProves information to the verifier.\nReveals the given ranges of the transcript.\nReveals the given ranges of the received data transcript.\nReveals the given ranges of the sent data transcript.\nReturns <code>true</code> if the server identity is to be proven.\nProves the server identity.\nReturns the server DNS name.\nThe server DNS name.\nSets up the prover.\nTLS prover states.\nReturns the transcript.\nReturns the transcript to be proven.\nReturns the transcript commitment configuration.\nConfigures transcript commitments.\nTranscript commitments.\nTranscript commitment secrets.\nState after the TLS connection has been committed and …\nEntry state\nState after MPC setup has completed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")